{
  "address": "0x0C0E24F5579c01f2056239DeD15cEc2848F34aB1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        }
      ],
      "name": "DaoCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCollateral",
          "type": "uint256"
        }
      ],
      "name": "createDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultChallengePeriodSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf3858267417ed43641ec2fbe9053ce6e960b55213c6eef241ccba7dcd2ce252",
  "receipt": {
    "to": null,
    "from": "0x9C8071143174f6BdeF8917Cc985a21C350fc11DE",
    "contractAddress": "0x0C0E24F5579c01f2056239DeD15cEc2848F34aB1",
    "transactionIndex": 27,
    "gasUsed": "3105953",
    "logsBloom": "0x
    "blockHash": "0x2a0d65b4207ee44f5adb5c3d9f393afccbffd5dd5ec784d70c66d8f9bb561594",
    "transactionHash": "0xdf3858267417ed43641ec2fbe9053ce6e960b55213c6eef241ccba7dcd2ce252",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 47292472,
        "transactionHash": "0xdf3858267417ed43641ec2fbe9053ce6e960b55213c6eef241ccba7dcd2ce252",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c8071143174f6bdef8917cc985a21c350fc11de",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000151f9cc577b0f6500000000000000000000000000000000000000000000000085d8bf8bfebfc5ba000000000000000000000000000000000000000000000001d9ce47154f4178fd0000000000000000000000000000000000000000000000008486c5bfa744b655000000000000000000000000000000000000000000000001db2040e1a6bc8862",
        "logIndex": 95,
        "blockHash": "0x2a0d65b4207ee44f5adb5c3d9f393afccbffd5dd5ec784d70c66d8f9bb561594"
      }
    ],
    "blockNumber": 47292472,
    "cumulativeGasUsed": "6551773",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cda1079c0ec7aa9519c537fb093da964",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"DaoCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCollateral\",\"type\":\"uint256\"}],\"name\":\"createDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultChallengePeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dao/factory/NFTDaoFactory.sol\":\"NFTDaoFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport './pool/IDaoPool.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nstruct PollCard {\\n    uint256 nativeForVotes;\\n    uint256 nativeAgainstVotes;\\n    uint256 tokenForVotes;\\n    uint256 tokenAgainstVotes;\\n}\\n\\ncontract Proposal is ReentrancyGuard {\\n    // 32 bytes hex value\\n    bytes32 public immutable proposalMerkleRootHex;\\n    address payable public immutable sequencerAddress;\\n    uint256 public immutable challengePeriodSeconds;\\n    uint256 public immutable nativeCollateral;\\n    uint256 public immutable tokenCollateral;\\n    bytes[] private payloads;\\n    address public immutable daoAddress;\\n    IDaoPool public immutable daoPool;\\n    uint256 public immutable contractCreationTime;\\n\\n    uint256 public forVotesCounter;\\n    uint256 public againstVotesCounter;\\n\\n    mapping(address => PollCard) public votes;\\n    bool public executed = false;\\n\\n    constructor(\\n        bytes32 _proposalMerkleRootHex,\\n        address payable _sequencerAddress,\\n        uint256 _nativeCollateral,\\n        uint256 _tokenCollateral,\\n        uint256 _challengePeriodSeconds,\\n        bytes[] memory _payloads,\\n        address _daoPoolAddress\\n    ) payable {\\n        require(_sequencerAddress != address(0), 'Invalid address');\\n        proposalMerkleRootHex = _proposalMerkleRootHex;\\n        sequencerAddress = _sequencerAddress;\\n        nativeCollateral = _nativeCollateral;\\n        tokenCollateral = _tokenCollateral;\\n        challengePeriodSeconds = _challengePeriodSeconds;\\n        payloads = _payloads;\\n        contractCreationTime = block.timestamp;\\n        daoPool = IDaoPool(_daoPoolAddress);\\n        daoAddress = msg.sender;\\n\\n        uint256 votesCount = _validateCollateralAndGetVotesCount();\\n        PollCard storage pollCard = votes[_sequencerAddress];\\n        pollCard.nativeForVotes = votesCount;\\n        forVotesCounter = votesCount;\\n    }\\n\\n    function vote(bool voteSide) public payable isInChallengePeriodMod {\\n        uint256 votesCount = _validateCollateralAndGetVotesCount();\\n        PollCard storage pollCard = votes[msg.sender];\\n        if (voteSide) {\\n            pollCard.nativeForVotes += votesCount;\\n            forVotesCounter += votesCount;\\n        } else {\\n            pollCard.nativeAgainstVotes += votesCount;\\n            againstVotesCounter += votesCount;\\n        }\\n    }\\n\\n    function _validateCollateralAndGetVotesCount() private returns (uint256) {\\n        require(msg.value >= nativeCollateral, 'Collateral too small');\\n        require(msg.value % nativeCollateral == 0, 'Collateral incorrect');\\n        return msg.value / nativeCollateral;\\n    }\\n\\n    function voteWithToken(bool voteSide) public isInChallengePeriodMod {\\n        uint256 votesCount = daoPool.balanceOf(msg.sender) / tokenCollateral;\\n        require(votesCount > 0, 'Token collateral too small');\\n        PollCard storage pollCard = votes[msg.sender];\\n        bool firstVote = pollCard.tokenForVotes == 0 && pollCard.tokenAgainstVotes == 0;\\n        if (voteSide) {\\n            uint256 previousTokenVotes = pollCard.tokenForVotes;\\n            pollCard.tokenForVotes = votesCount;\\n            forVotesCounter = (forVotesCounter - previousTokenVotes) + votesCount;\\n        } else {\\n            uint256 previousTokenVotes = pollCard.tokenAgainstVotes;\\n            pollCard.tokenAgainstVotes = votesCount;\\n            againstVotesCounter = (againstVotesCounter - previousTokenVotes) + votesCount;\\n        }\\n        if (firstVote) {\\n            daoPool.vote(msg.sender, voteSide);\\n        }\\n    }\\n\\n    function claimReward() public payable isAfterChallengePeriodMod {\\n        PollCard memory pollCard = votes[msg.sender];\\n        bool passed = isPassed();\\n        uint256 wonVoterVotesCount = passed\\n            ? (pollCard.nativeForVotes + pollCard.tokenForVotes)\\n            : (pollCard.nativeAgainstVotes + pollCard.tokenAgainstVotes);\\n        require(wonVoterVotesCount > 0, 'Reward not apply');\\n        uint256 allWonVotesCount = passed ? forVotesCounter : againstVotesCounter;\\n        uint256 allOppositeVotesCount = passed ? againstVotesCounter : forVotesCounter;\\n        uint256 balanceToDistribute = allOppositeVotesCount * nativeCollateral;\\n        uint256 dust = balanceToDistribute % allWonVotesCount;\\n        uint256 voterReturnCollateralCount = passed ? pollCard.nativeForVotes : pollCard.nativeAgainstVotes;\\n        uint256 reward = (voterReturnCollateralCount * nativeCollateral) + ((balanceToDistribute * wonVoterVotesCount) / allWonVotesCount);\\n        // if it's last tx, send the dust left to last claimer\\n        if (reward + dust == address(this).balance) {\\n            reward = address(this).balance;\\n        }\\n        delete votes[msg.sender];\\n        payable(msg.sender).transfer(reward);\\n    }\\n\\n    function executeProposal() public payable isAfterChallengePeriodMod nonReentrant {\\n        require(!executed, 'Proposal already executed');\\n        require(isPassed(), 'Proposal did not pass');\\n        executed = true;\\n        bytes[] memory _payloads = payloads;\\n        for (uint256 i = 0; i < _payloads.length; ++i) {\\n            bytes memory payload = _payloads[i];\\n            (bool success,) = daoAddress.call(payload);\\n            require(success, 'Proposal: underlying transaction reverted');\\n        }\\n        if (againstVotesCounter == 0) {\\n            PollCard memory pollCard = votes[sequencerAddress];\\n            delete votes[sequencerAddress];\\n            payable(sequencerAddress).transfer(pollCard.nativeForVotes * nativeCollateral);\\n        }\\n    }\\n\\n    function isEnded() public view returns (bool) {\\n        return !_isInChallengePeriod();\\n    }\\n\\n    function isPassed() public view returns (bool) {\\n        if (_isInChallengePeriod()) {\\n            return false;\\n        }\\n        return forVotesCounter > againstVotesCounter;\\n    }\\n\\n    function getPayloads() public view returns (bytes[] memory) {\\n        return payloads;\\n    }\\n\\n    function _isInChallengePeriod() private view returns (bool) {\\n        return block.timestamp <= (contractCreationTime + challengePeriodSeconds);\\n    }\\n\\n    modifier isInChallengePeriodMod() {\\n        require(block.timestamp <= (contractCreationTime + challengePeriodSeconds), 'Is not in challenge period');\\n        _;\\n    }\\n\\n    modifier isAfterChallengePeriodMod() {\\n        require(block.timestamp > (contractCreationTime + challengePeriodSeconds), 'Is not after challenge period');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc53684df32c14f7cc77c2aea03b2612e5af0067edd279f1d83cee209a8f65c1b\",\"license\":\"MIT\"},\"contracts/dao/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '../Proposal.sol';\\nimport '../pool/DaoPool.sol';\\n\\nabstract contract Dao is ReentrancyGuard, IERC721Receiver {\\n\\n    mapping(bytes => Proposal) public proposals;\\n    uint256 public tokenCollateral;\\n    uint256 public challengePeriodSeconds;\\n    uint256 public nativeCollateral;\\n\\n    event ProposalCreated(bytes proposalId, address proposalAddress);\\n    event DaoPoolCreated(address daoPoolAddress);\\n\\n    function getDaoPool() internal virtual returns (DaoPool);\\n\\n    // _tokenCollateral - should already include decimals\\n    // _challengePeriod - in seconds\\n    // _nativeCollateral - in wei\\n    constructor(uint256 _tokenCollateral, uint256 _challengePeriodSeconds, uint256 _nativeCollateral) {\\n        tokenCollateral = _tokenCollateral;\\n        challengePeriodSeconds = _challengePeriodSeconds;\\n        nativeCollateral = _nativeCollateral;\\n    }\\n\\n    // proposalId - IPFS hash of the proposal result generated by stateborn.org\\n    function createProposal(bytes memory _proposalId, bytes32 _proposalMerkleRoot, bytes[] calldata _payloads) public payable nonReentrant {\\n        Proposal existingPool = proposals[_proposalId];\\n        require(address(existingPool) == address(0), 'Proposal already exists');\\n        Proposal proposal = new Proposal{value: msg.value}(\\n            _proposalMerkleRoot,\\n            payable(msg.sender),\\n            nativeCollateral,\\n            tokenCollateral,\\n            challengePeriodSeconds,\\n            _payloads,\\n            address(getDaoPool())\\n        );\\n        proposals[_proposalId] = proposal;\\n        getDaoPool().approveProposal(address(proposal));\\n        emit ProposalCreated(_proposalId, address(proposal));\\n    }\\n\\n    function sendErc20(bytes memory proposalId, address tokenAddress, address to, uint256 amount) external {\\n        verifyProposal(proposalId);\\n        require(IERC20(tokenAddress).transfer(to, amount), 'ERC20 transfer failed');\\n    }\\n\\n    function sendNft(bytes memory proposalId, address tokenAddress, address to, uint256 tokenId) external {\\n        verifyProposal(proposalId);\\n        IERC721(tokenAddress).safeTransferFrom(address(this), to, tokenId);\\n    }\\n\\n    function sendCrypto(bytes memory proposalId, address to, uint256 amount) external {\\n        require(to != address(0), 'Invalid address');\\n        verifyProposal(proposalId);\\n        payable(to).transfer(amount);\\n    }\\n\\n    function updateTokenCollateral(bytes memory proposalId, uint256 _tokenCollateral) external {\\n        verifyProposal(proposalId);\\n        tokenCollateral = _tokenCollateral;\\n    }\\n\\n    function updateChallengePeriodSeconds(bytes memory proposalId, uint256 _challengePeriodSeconds) external {\\n        verifyProposal(proposalId);\\n        challengePeriodSeconds = _challengePeriodSeconds;\\n    }\\n\\n    function updateNativeCollateral(bytes memory proposalId, uint256 _nativeCollateral) external {\\n        verifyProposal(proposalId);\\n        nativeCollateral = _nativeCollateral;\\n    }\\n\\n    function verifyProposal(bytes memory proposalId) view private {\\n        address proposalAddress = address(proposals[proposalId]);\\n        require(proposalAddress != address(0), 'Proposal does not exist');\\n        require(msg.sender == proposalAddress, 'Only proposal can call');\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) external override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x533f1b26f42861c907e8a11f13f23d81216164e2ca7f45639776cc350040cd76\",\"license\":\"MIT\"},\"contracts/dao/NFTDao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport './Dao.sol';\\nimport '../pool/NFTDaoPool.sol';\\n\\ncontract NFTDao is Dao {\\n\\n    NFTDaoPool public immutable daoPool;\\n\\n    constructor(\\n        address _daoTokenAddress,\\n        uint256 _tokenCollateral,\\n        uint256 _challengePeriodSeconds,\\n        uint256 _nativeCollateral\\n    ) Dao(_tokenCollateral, _challengePeriodSeconds, _nativeCollateral) {\\n        daoPool = new NFTDaoPool(_daoTokenAddress);\\n        emit DaoPoolCreated(address(daoPool));\\n    }\\n\\n    function getDaoPool() internal view override returns (DaoPool) {\\n        return daoPool;\\n    }\\n}\\n\",\"keccak256\":\"0x67535bc403c89ebaa6450ab652b1aaaee61646aece1b2f6c905c02ca566beed4\",\"license\":\"MIT\"},\"contracts/dao/factory/DaoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../Dao.sol\\\";\\n\\nabstract contract DaoFactory {\\n\\n    Dao[] private daos;\\n\\n    uint256 public constant defaultChallengePeriodSeconds = 3 days;\\n    uint256 public constant nativeCollateral = 0.1 ether;\\n\\n    event DaoCreated(address daoAddress);\\n\\n    function createDao(address tokenAddress, uint256 tokenCollateral) public {\\n        Dao dao = initializeDao(tokenAddress, tokenCollateral);\\n        daos.push(dao);\\n        emit DaoCreated(address(dao));\\n    }\\n\\n    function initializeDao(address tokenAddress, uint256 tokenCollateral) internal virtual returns (Dao);\\n}\\n\",\"keccak256\":\"0xe440783e83835ad7188db23a91ff4fd924c946a8093d95b3f3c031fa780fc29f\",\"license\":\"MIT\"},\"contracts/dao/factory/NFTDaoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./DaoFactory.sol\\\";\\nimport \\\"../NFTDao.sol\\\";\\n\\ncontract NFTDaoFactory is DaoFactory {\\n\\n    function initializeDao(address tokenAddress, uint256 tokenCollateral) override internal returns (Dao) {\\n        return new NFTDao(tokenAddress, tokenCollateral, defaultChallengePeriodSeconds, nativeCollateral);\\n    }\\n}\\n\",\"keccak256\":\"0xbb3b2c8f8dcb1dfc3bdf45936dee0d5e872ea88818ba767a3a2006ec0cc6588c\",\"license\":\"MIT\"},\"contracts/pool/DaoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IDaoPool.sol';\\n\\nabstract contract DaoPool is IDaoPool, Ownable {\\n    mapping(address => address[]) internal proposalForVoters;\\n    mapping(address => address[]) internal proposalAgainstVoters;\\n    mapping(address => uint256) public voterActiveProposals;\\n    mapping(address => bool) public approvedProposals;\\n\\n    // only DAO can call this\\n    function approveProposal(address proposalAddress) public onlyOwner {\\n        approvedProposals[proposalAddress] = true;\\n    }\\n\\n    // is invoked by proposal\\n    // msg.sender == proposal address\\n    function vote(address voterAddress, bool voteSide) external override {\\n        require(approvedProposals[msg.sender], 'Proposal not approved');\\n        address[] storage voters = voteSide ? proposalForVoters[msg.sender] : proposalAgainstVoters[msg.sender];\\n        for (uint256 i = 0; i < voters.length; i++) {\\n            require(voters[i] != voterAddress, 'Already voted');\\n        }\\n        if (voteSide) {\\n            proposalForVoters[msg.sender].push(voterAddress);\\n        } else {\\n            proposalAgainstVoters[msg.sender].push(voterAddress);\\n        }\\n        voterActiveProposals[voterAddress] += 1;\\n    }\\n\\n    function decreaseWonSideVotersProposals(bool isProposalPassed, address proposalAddress) internal {\\n        address[] memory wonSideVoters = isProposalPassed ? proposalForVoters[proposalAddress] : proposalAgainstVoters[proposalAddress];\\n        for (uint256 i = 0; i < wonSideVoters.length; i++) {\\n            voterActiveProposals[wonSideVoters[i]] -= 1;\\n        }\\n    }\\n\\n    function getProposalForVoters(address proposalAddress) public view returns (address[] memory) {\\n        return proposalForVoters[proposalAddress];\\n    }\\n\\n    function getProposalAgainstVoters(address proposalAddress) public view returns (address[] memory) {\\n        return proposalAgainstVoters[proposalAddress];\\n    }\\n\\n    modifier hasNoActiveProposals() {\\n        require(voterActiveProposals[msg.sender] == 0, 'User has active proposals');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9449b87afa416dd45286c4c911bc79a805325b16084e8c3e3f7a0b502f2c6608\",\"license\":\"MIT\"},\"contracts/pool/IDaoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IDaoPool {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function vote(address proposalAddress, bool voteSide) external;\\n}\\n\",\"keccak256\":\"0xd8ece40d8dc43afb7d3f4e806d2bcdc7ab10edc3a0ec5f378c9fed2821f199a9\",\"license\":\"MIT\"},\"contracts/pool/NFTDaoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './DaoPool.sol';\\nimport '../Proposal.sol';\\n\\ncontract NFTDaoPool is DaoPool, IERC721Receiver, ReentrancyGuard {\\n    IERC721 public immutable token;\\n    mapping(address => uint256[]) public balances;\\n\\n    event TokensDeposited(address indexed user, address indexed tokenAddress, uint256 tokenId);\\n    event TokensWithdrawn(address indexed user, address indexed tokenAddress, uint256 tokenId, address indexed withdrawAddress);\\n\\n    constructor(address _tokenAddress) {\\n        token = IERC721(_tokenAddress);\\n    }\\n\\n    function deposit(uint256 tokenId) public {\\n        balances[msg.sender].push(tokenId);\\n        emit TokensDeposited(msg.sender, address(token), tokenId);\\n        token.safeTransferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdraw(uint256 tokenId, address withdrawAddress) public hasNoActiveProposals {\\n        uint256[] storage userTokenIds = balances[msg.sender];\\n        bool found = false;\\n        for (uint256 i = 0; i < balances[msg.sender].length; i++) {\\n            if (userTokenIds[i] == tokenId) {\\n                userTokenIds[i] = userTokenIds[userTokenIds.length - 1];\\n                userTokenIds.pop();\\n                found = true;\\n                token.safeTransferFrom(address(this), withdrawAddress, tokenId);\\n                break;\\n            }\\n        }\\n        if (!found) {\\n            revert('Token not found');\\n        } else {\\n            emit TokensWithdrawn(msg.sender, address(token), tokenId, withdrawAddress);\\n        }\\n    }\\n\\n    function resolveProposal(address proposalAddress) public nonReentrant {\\n        require(approvedProposals[proposalAddress], 'Proposal not approved');\\n        Proposal proposal = Proposal(proposalAddress);\\n        require(proposal.isEnded(), 'Proposal not ended');\\n        address[] memory lostSideVoters = proposal.isPassed() ? proposalAgainstVoters[proposalAddress] : proposalForVoters[proposalAddress];\\n        for (uint256 i = 0; i < lostSideVoters.length; i++) {\\n            address voterAddress = lostSideVoters[i];\\n            uint256[] memory userTokenIds = balances[voterAddress];\\n            for (uint256 k = 0; k < userTokenIds.length; k++) {\\n                uint256 tokenId = userTokenIds[k];\\n                token.safeTransferFrom(address(this), owner(), tokenId);\\n            }\\n            delete balances[voterAddress];\\n            voterActiveProposals[voterAddress] = 0;\\n        }\\n        decreaseWonSideVotersProposals(proposal.isPassed(), proposalAddress);\\n        delete proposalForVoters[proposalAddress];\\n        delete proposalAgainstVoters[proposalAddress];\\n        delete approvedProposals[proposalAddress];\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return balances[account].length;\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) external override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x06443a0649bf63421308c2d46283198b45c3371c2aaeb874ffa84227ead2bc1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5251,
        "contract": "contracts/dao/factory/NFTDaoFactory.sol:NFTDaoFactory",
        "label": "daos",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Dao)5140)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(Dao)5140)dyn_storage": {
        "base": "t_contract(Dao)5140",
        "encoding": "dynamic_array",
        "label": "contract Dao[]",
        "numberOfBytes": "32"
      },
      "t_contract(Dao)5140": {
        "encoding": "inplace",
        "label": "contract Dao",
        "numberOfBytes": "20"
      }
    }
  }
}