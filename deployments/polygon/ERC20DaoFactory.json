{
  "address": "0x5479e46a4fa35dc4295ea394f602ff7d87de9a6e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        }
      ],
      "name": "DaoCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCollateral",
          "type": "uint256"
        }
      ],
      "name": "createDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultChallengePeriodSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExtendChallengePeriodSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0f241fdfba797a007d3e1dc9d257b12efd0fbb51c894d93af9a9874106dd0ef",
  "receipt": {
    "to": null,
    "from": "0x9c8071143174f6bdef8917cc985a21c350fc11de",
    "contractAddress": "0x5479e46a4fa35dc4295ea394f602ff7d87de9a6e",
    "transactionIndex": "0x34",
    "gasUsed": "0x2ef7ce",
    "logsBloom": "0x
    "blockHash": "0xb3475a959ecc39f59eda40195b4b8d9e76e0fbe11f8a5d49471a2e307c8cd7b6",
    "transactionHash": "0xc0f241fdfba797a007d3e1dc9d257b12efd0fbb51c894d93af9a9874106dd0ef",
    "logs": [
      {
        "transactionHash": "0xc0f241fdfba797a007d3e1dc9d257b12efd0fbb51c894d93af9a9874106dd0ef",
        "address": "0x0000000000000000000000000000000000001010",
        "blockHash": "0xb3475a959ecc39f59eda40195b4b8d9e76e0fbe11f8a5d49471a2e307c8cd7b6",
        "blockNumber": "0x2f0c213",
        "data": "0x00000000000000000000000000000000000000000000000000494f7b49f68e2c0000000000000000000000000000000000000000000000003360d587a095b0c5000000000000000000000000000000000000000000000d10a150aec690f70b390000000000000000000000000000000000000000000000003317860c569f2299000000000000000000000000000000000000000000000d10a199fe41daed9965",
        "logIndex": "0x4fb",
        "removed": false,
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009c8071143174f6bdef8917cc985a21c350fc11de",
          "0x000000000000000000000000048cfedf907c4c9ddd11ff882380906e78e84bbe"
        ],
        "transactionIndex": "0x34"
      }
    ],
    "blockNumber": "0x2f0c213",
    "cumulativeGasUsed": "0x1b6f4b8",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "31814dd51f7870c41f693951f3cd0881",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"}],\"name\":\"DaoCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCollateral\",\"type\":\"uint256\"}],\"name\":\"createDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultChallengePeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExtendChallengePeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dao/factory/ERC20DaoFactory.sol\":\"ERC20DaoFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport './pool/IDaoPool.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nstruct PollCard {\\n    uint256 nativeForVotes;\\n    uint256 nativeAgainstVotes;\\n    uint256 tokenForVotes;\\n    uint256 tokenAgainstVotes;\\n}\\n\\ncontract Proposal is ReentrancyGuard {\\n    // 32 bytes hex value\\n    bytes32 public immutable proposalMerkleRootHex;\\n    address payable public immutable sequencerAddress;\\n    uint256 public challengePeriodSeconds;\\n    uint256 public immutable nativeCollateral;\\n    uint256 public immutable tokenCollateral;\\n    bytes[] private payloads;\\n    address public immutable daoAddress;\\n    IDaoPool public immutable daoPool;\\n    uint256 public immutable contractCreationTime;\\n\\n    uint256 public forVotesCounter;\\n    uint256 public againstVotesCounter;\\n\\n    mapping(address => PollCard) public votes;\\n    bool public executed = false;\\n    uint256 public extendChallengePeriodSeconds;\\n\\n    event ChallengePeriodExtended(uint256 extendChallengePeriodSeconds);\\n    event Voted(address voter, bool voteSide, uint256 votesCount, bool isTokenVote);\\n    event Executed(address executor);\\n    event RewardClaimed(address claimer, uint256 reward);\\n\\n    constructor(\\n        bytes32 _proposalMerkleRootHex,\\n        address payable _sequencerAddress,\\n        uint256 _nativeCollateral,\\n        uint256 _tokenCollateral,\\n        uint256 _challengePeriodSeconds,\\n        bytes[] memory _payloads,\\n        address _daoPoolAddress,\\n        uint256 _extendChallengePeriodSeconds\\n    ) payable {\\n        require(_sequencerAddress != address(0), 'Invalid address');\\n        proposalMerkleRootHex = _proposalMerkleRootHex;\\n        sequencerAddress = _sequencerAddress;\\n        nativeCollateral = _nativeCollateral;\\n        tokenCollateral = _tokenCollateral;\\n        challengePeriodSeconds = _challengePeriodSeconds;\\n        payloads = _payloads;\\n        contractCreationTime = block.timestamp;\\n        daoPool = IDaoPool(_daoPoolAddress);\\n        daoAddress = msg.sender;\\n        extendChallengePeriodSeconds = _extendChallengePeriodSeconds;\\n\\n        uint256 votesCount = _validateCollateralAndGetVotesCount();\\n        PollCard storage pollCard = votes[_sequencerAddress];\\n        pollCard.nativeForVotes = votesCount;\\n        forVotesCounter = votesCount;\\n        emit Voted(_sequencerAddress, true, votesCount, false);\\n    }\\n\\n    function vote(bool voteSide) public payable isInChallengePeriodMod {\\n        extendChallengeIfVoteInLastHour();\\n        uint256 votesCount = _validateCollateralAndGetVotesCount();\\n        PollCard storage pollCard = votes[msg.sender];\\n        if (voteSide) {\\n            pollCard.nativeForVotes += votesCount;\\n            forVotesCounter += votesCount;\\n        } else {\\n            pollCard.nativeAgainstVotes += votesCount;\\n            againstVotesCounter += votesCount;\\n        }\\n        emit Voted(msg.sender, voteSide, votesCount, false);\\n    }\\n\\n    function _validateCollateralAndGetVotesCount() private returns (uint256) {\\n        require(msg.value >= nativeCollateral, 'Collateral too small');\\n        require(msg.value % nativeCollateral == 0, 'Collateral incorrect');\\n        return msg.value / nativeCollateral;\\n    }\\n\\n    function voteWithToken(bool voteSide) public isInChallengePeriodMod {\\n        extendChallengeIfVoteInLastHour();\\n        uint256 votesCount = daoPool.balanceOf(msg.sender) / tokenCollateral;\\n        require(votesCount > 0, 'Token collateral too small');\\n        PollCard storage pollCard = votes[msg.sender];\\n        bool firstVote = pollCard.tokenForVotes == 0 && pollCard.tokenAgainstVotes == 0;\\n        if (voteSide) {\\n            uint256 previousTokenVotes = pollCard.tokenForVotes;\\n            pollCard.tokenForVotes = votesCount;\\n            forVotesCounter = (forVotesCounter - previousTokenVotes) + votesCount;\\n        } else {\\n            uint256 previousTokenVotes = pollCard.tokenAgainstVotes;\\n            pollCard.tokenAgainstVotes = votesCount;\\n            againstVotesCounter = (againstVotesCounter - previousTokenVotes) + votesCount;\\n        }\\n        if (firstVote) {\\n            daoPool.vote(msg.sender, voteSide);\\n        }\\n        emit Voted(msg.sender, voteSide, votesCount, true);\\n    }\\n\\n    function claimReward() public payable isAfterChallengePeriodMod {\\n        PollCard memory pollCard = votes[msg.sender];\\n        bool passed = isPassed();\\n        uint256 wonVoterVotesCount = passed\\n            ? (pollCard.nativeForVotes + pollCard.tokenForVotes)\\n            : (pollCard.nativeAgainstVotes + pollCard.tokenAgainstVotes);\\n        require(wonVoterVotesCount > 0, 'Reward not apply');\\n        uint256 allWonVotesCount = passed ? forVotesCounter : againstVotesCounter;\\n        uint256 allOppositeVotesCount = passed ? againstVotesCounter : forVotesCounter;\\n        uint256 balanceToDistribute = allOppositeVotesCount * nativeCollateral;\\n        uint256 dust = balanceToDistribute % allWonVotesCount;\\n        uint256 voterReturnCollateralCount = passed ? pollCard.nativeForVotes : pollCard.nativeAgainstVotes;\\n        uint256 reward = (voterReturnCollateralCount * nativeCollateral) + ((balanceToDistribute * wonVoterVotesCount) / allWonVotesCount);\\n        // if it's last tx, send the dust left to last claimer\\n        if (reward + dust == address(this).balance) {\\n            reward = address(this).balance;\\n        }\\n        delete votes[msg.sender];\\n        payable(msg.sender).transfer(reward);\\n        emit RewardClaimed(msg.sender, reward);\\n    }\\n\\n    function executeProposal() public payable isAfterChallengePeriodMod nonReentrant {\\n        require(!executed, 'Proposal already executed');\\n        require(isPassed(), 'Proposal did not pass');\\n        executed = true;\\n        bytes[] memory _payloads = payloads;\\n        for (uint256 i = 0; i < _payloads.length; ++i) {\\n            bytes memory payload = _payloads[i];\\n            (bool success,) = daoAddress.call(payload);\\n            require(success, 'Proposal: underlying transaction reverted');\\n        }\\n        if (againstVotesCounter == 0) {\\n            PollCard memory pollCard = votes[sequencerAddress];\\n            delete votes[sequencerAddress];\\n            payable(sequencerAddress).transfer(pollCard.nativeForVotes * nativeCollateral);\\n        }\\n        emit Executed(msg.sender);\\n    }\\n\\n//    This eliminates the racing - voting in last hour extends the challenge period for \\\"extendChallengePeriodSeconds\\\" seconds\\n    function extendChallengeIfVoteInLastHour() private {\\n        if (block.timestamp > (contractCreationTime + challengePeriodSeconds - 1 hours)) {\\n            challengePeriodSeconds += extendChallengePeriodSeconds;\\n            emit ChallengePeriodExtended(extendChallengePeriodSeconds);\\n        }\\n    }\\n\\n    function isEnded() public view returns (bool) {\\n        return !_isInChallengePeriod();\\n    }\\n\\n    function isPassed() public view returns (bool) {\\n        if (_isInChallengePeriod()) {\\n            return false;\\n        }\\n        return forVotesCounter > againstVotesCounter;\\n    }\\n\\n    function getPayloads() public view returns (bytes[] memory) {\\n        return payloads;\\n    }\\n\\n    function _isInChallengePeriod() private view returns (bool) {\\n        return block.timestamp <= (contractCreationTime + challengePeriodSeconds);\\n    }\\n\\n    modifier isInChallengePeriodMod() {\\n        require(block.timestamp <= (contractCreationTime + challengePeriodSeconds), 'Is not in challenge period');\\n        _;\\n    }\\n\\n    modifier isAfterChallengePeriodMod() {\\n        require(block.timestamp > (contractCreationTime + challengePeriodSeconds), 'Is not after challenge period');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd1270bd63fb33787a36195495f1809e4543f4d1c6f198427de768651e41616ef\",\"license\":\"MIT\"},\"contracts/dao/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '../Proposal.sol';\\nimport '../pool/DaoPool.sol';\\n\\nabstract contract Dao is ReentrancyGuard, IERC721Receiver {\\n\\n    mapping(bytes => Proposal) public proposals;\\n    uint256 public tokenCollateral;\\n    uint256 public challengePeriodSeconds;\\n    uint256 public nativeCollateral;\\n    uint256 public extendChallengePeriodSeconds;\\n\\n    event ProposalCreated(\\n        bytes proposalId,\\n        address proposalAddress,\\n        bytes32 _proposalMerkleRootHex,\\n        address payable _sequencerAddress,\\n        uint256 _nativeCollateral,\\n        uint256 _tokenCollateral,\\n        uint256 _challengePeriodSeconds,\\n        bytes[] _payloads,\\n        uint256 _extendChallengePeriodSeconds);\\n    event DaoPoolCreated(address daoPoolAddress);\\n    function getDaoPool() internal virtual returns (DaoPool);\\n\\n    // _tokenCollateral - should already include decimals\\n    // _challengePeriod - in seconds\\n    // _nativeCollateral - in wei\\n    constructor(uint256 _tokenCollateral, uint256 _challengePeriodSeconds, uint256 _nativeCollateral, uint256 _extendChallengePeriodSeconds) {\\n        tokenCollateral = _tokenCollateral;\\n        challengePeriodSeconds = _challengePeriodSeconds;\\n        nativeCollateral = _nativeCollateral;\\n        extendChallengePeriodSeconds = _extendChallengePeriodSeconds;\\n    }\\n\\n    // proposalId - IPFS hash of the proposal result generated by stateborn.org\\n    function createProposal(bytes memory _proposalId, bytes32 _proposalMerkleRoot, bytes[] calldata _payloads) public payable nonReentrant {\\n        Proposal existingPool = proposals[_proposalId];\\n        require(address(existingPool) == address(0), 'Proposal already exists');\\n        Proposal proposal = new Proposal{value: msg.value}(\\n            _proposalMerkleRoot,\\n            payable(msg.sender),\\n            nativeCollateral,\\n            tokenCollateral,\\n            challengePeriodSeconds,\\n            _payloads,\\n            address(getDaoPool()),\\n            extendChallengePeriodSeconds\\n        );\\n        proposals[_proposalId] = proposal;\\n        getDaoPool().approveProposal(address(proposal));\\n        emit ProposalCreated(_proposalId, address(proposal), _proposalMerkleRoot, payable(msg.sender), nativeCollateral, tokenCollateral, challengePeriodSeconds, _payloads, extendChallengePeriodSeconds);\\n    }\\n\\n    function sendErc20(bytes memory proposalId, address tokenAddress, address to, uint256 amount) external {\\n        verifyProposal(proposalId);\\n        require(IERC20(tokenAddress).transfer(to, amount), 'ERC20 transfer failed');\\n    }\\n\\n    function sendNft(bytes memory proposalId, address tokenAddress, address to, uint256 tokenId) external {\\n        verifyProposal(proposalId);\\n        IERC721(tokenAddress).safeTransferFrom(address(this), to, tokenId);\\n    }\\n\\n    function sendCrypto(bytes memory proposalId, address to, uint256 amount) external {\\n        require(to != address(0), 'Invalid address');\\n        verifyProposal(proposalId);\\n        payable(to).transfer(amount);\\n    }\\n\\n    function updateTokenCollateral(bytes memory proposalId, uint256 _tokenCollateral) external {\\n        verifyProposal(proposalId);\\n        tokenCollateral = _tokenCollateral;\\n    }\\n\\n    function updateChallengePeriodSeconds(bytes memory proposalId, uint256 _challengePeriodSeconds) external {\\n        verifyProposal(proposalId);\\n        challengePeriodSeconds = _challengePeriodSeconds;\\n    }\\n\\n    function updateNativeCollateral(bytes memory proposalId, uint256 _nativeCollateral) external {\\n        verifyProposal(proposalId);\\n        nativeCollateral = _nativeCollateral;\\n    }\\n\\n    function verifyProposal(bytes memory proposalId) view private {\\n        address proposalAddress = address(proposals[proposalId]);\\n        require(proposalAddress != address(0), 'Proposal does not exist');\\n        require(msg.sender == proposalAddress, 'Only proposal can call');\\n    }\\n\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) external override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x8da1b5c1c2abbe19030ab65a45d7f0ad67f0bf44494f81e3c3916ee656c83c41\",\"license\":\"MIT\"},\"contracts/dao/ERC20Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport './Dao.sol';\\nimport '../pool/ERC20DaoPool.sol';\\n\\ncontract ERC20Dao is Dao {\\n\\n    ERC20DaoPool public immutable daoPool;\\n\\n    constructor(\\n        address _daoTokenAddress,\\n        uint256 _tokenCollateral,\\n        uint256 _challengePeriodSeconds,\\n        uint256 _nativeCollateral,\\n        uint256 _extendChallengePeriodSeconds\\n    ) Dao(_tokenCollateral, _challengePeriodSeconds, _nativeCollateral, _extendChallengePeriodSeconds) {\\n        daoPool = new ERC20DaoPool(_daoTokenAddress);\\n        emit DaoPoolCreated(address(daoPool));\\n    }\\n\\n    function getDaoPool() internal view override returns (DaoPool) {\\n        return daoPool;\\n    }\\n}\\n\",\"keccak256\":\"0x9b6bfec6095ec4899251993e9180d88ca6b96005c6cedd368e4eed7859cae8aa\",\"license\":\"MIT\"},\"contracts/dao/factory/DaoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../Dao.sol\\\";\\n\\nabstract contract DaoFactory {\\n\\n    Dao[] private daos;\\n\\n    uint256 public constant defaultChallengePeriodSeconds = 3 days;\\n    uint256 public constant nativeCollateral = 0.1 ether;\\n    uint256 public constant defaultExtendChallengePeriodSeconds = 1 days;\\n\\n    event DaoCreated(address daoAddress);\\n\\n    function createDao(address tokenAddress, uint256 tokenCollateral) public {\\n        Dao dao = initializeDao(tokenAddress, tokenCollateral, defaultExtendChallengePeriodSeconds);\\n        daos.push(dao);\\n        emit DaoCreated(address(dao));\\n    }\\n\\n    function initializeDao(address tokenAddress, uint256 tokenCollateral, uint256 extendChallengePeriodSeconds) internal virtual returns (Dao);\\n}\\n\",\"keccak256\":\"0xa12b43c31a5208e0eaa52762fad1d4436d50311267e4d863bb2577a21921b704\",\"license\":\"MIT\"},\"contracts/dao/factory/ERC20DaoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./DaoFactory.sol\\\";\\nimport \\\"../ERC20Dao.sol\\\";\\n\\ncontract ERC20DaoFactory is DaoFactory {\\n\\n    function initializeDao(address tokenAddress, uint256 tokenCollateral, uint256 extendChallengePeriodSeconds) override internal returns (Dao) {\\n        return new ERC20Dao(tokenAddress, tokenCollateral, defaultChallengePeriodSeconds, nativeCollateral, extendChallengePeriodSeconds);\\n    }\\n}\\n\",\"keccak256\":\"0xf6a7723c94014a3868706091c4742b951db938bff4de6e86d65566e7a77d29e1\",\"license\":\"MIT\"},\"contracts/pool/DaoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IDaoPool.sol';\\n\\nabstract contract DaoPool is IDaoPool, Ownable {\\n    mapping(address => address[]) internal proposalForVoters;\\n    mapping(address => address[]) internal proposalAgainstVoters;\\n    mapping(address => uint256) public voterActiveProposals;\\n    mapping(address => bool) public approvedProposals;\\n\\n    // only DAO can call this\\n    function approveProposal(address proposalAddress) public onlyOwner {\\n        approvedProposals[proposalAddress] = true;\\n    }\\n\\n    // is invoked by proposal\\n    // msg.sender == proposal address\\n    function vote(address voterAddress, bool voteSide) external override {\\n        require(approvedProposals[msg.sender], 'Proposal not approved');\\n        address[] storage voters = voteSide ? proposalForVoters[msg.sender] : proposalAgainstVoters[msg.sender];\\n        for (uint256 i = 0; i < voters.length; i++) {\\n            require(voters[i] != voterAddress, 'Already voted');\\n        }\\n        if (voteSide) {\\n            proposalForVoters[msg.sender].push(voterAddress);\\n        } else {\\n            proposalAgainstVoters[msg.sender].push(voterAddress);\\n        }\\n        voterActiveProposals[voterAddress] += 1;\\n    }\\n\\n    function decreaseWonSideVotersProposals(bool isProposalPassed, address proposalAddress) internal {\\n        address[] memory wonSideVoters = isProposalPassed ? proposalForVoters[proposalAddress] : proposalAgainstVoters[proposalAddress];\\n        for (uint256 i = 0; i < wonSideVoters.length; i++) {\\n            voterActiveProposals[wonSideVoters[i]] -= 1;\\n        }\\n    }\\n\\n    function getProposalForVoters(address proposalAddress) public view returns (address[] memory) {\\n        return proposalForVoters[proposalAddress];\\n    }\\n\\n    function getProposalAgainstVoters(address proposalAddress) public view returns (address[] memory) {\\n        return proposalAgainstVoters[proposalAddress];\\n    }\\n\\n    modifier hasNoActiveProposals() {\\n        require(voterActiveProposals[msg.sender] == 0, 'User has active proposals');\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9449b87afa416dd45286c4c911bc79a805325b16084e8c3e3f7a0b502f2c6608\",\"license\":\"MIT\"},\"contracts/pool/ERC20DaoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './DaoPool.sol';\\nimport '../Proposal.sol';\\n\\ncontract ERC20DaoPool is DaoPool {\\n    IERC20 public immutable token;\\n    mapping(address => uint256) public balances;\\n\\n    event TokensDeposited(address indexed user, address indexed tokenAddress, uint256 amount);\\n    event TokensWithdrawn(address indexed user, address indexed tokenAddress, uint256 amount, address indexed withdrawAddress);\\n\\n    constructor(address _tokenAddress) {\\n        token = IERC20(_tokenAddress);\\n    }\\n\\n    function deposit(uint256 amount) public {\\n        balances[msg.sender] += amount;\\n        emit TokensDeposited(msg.sender, address(token), amount);\\n        require(token.transferFrom(msg.sender, address(this), amount), 'Transfer failed');\\n    }\\n\\n    function withdraw(uint256 amount, address withdrawAddress) public hasNoActiveProposals {\\n        require(balances[msg.sender] >= amount, 'Insufficient balance');\\n        balances[msg.sender] -= amount;\\n        if (balances[msg.sender] == 0) {\\n            delete balances[msg.sender];\\n        }\\n        require(token.transfer(withdrawAddress, amount), 'Transfer failed');\\n        emit TokensWithdrawn(msg.sender, address(token), amount, withdrawAddress);\\n    }\\n\\n    function resolveProposal(address proposalAddress) public {\\n        require(approvedProposals[proposalAddress], 'Proposal not approved');\\n        Proposal proposal = Proposal(proposalAddress);\\n        require(proposal.isEnded(), 'Proposal not ended');\\n        address[] memory lostSideVoters = proposal.isPassed() ? proposalAgainstVoters[proposalAddress] : proposalForVoters[proposalAddress];\\n        uint256 toTransferAmount = 0;\\n        for (uint256 i = 0; i < lostSideVoters.length; i++) {\\n            address voterAddress = lostSideVoters[i];\\n            toTransferAmount += balanceOf(voterAddress);\\n            delete balances[voterAddress];\\n            voterActiveProposals[voterAddress] = 0;\\n        }\\n        decreaseWonSideVotersProposals(proposal.isPassed(), proposalAddress);\\n        delete proposalForVoters[proposalAddress];\\n        delete proposalAgainstVoters[proposalAddress];\\n        delete approvedProposals[proposalAddress];\\n        require(token.transfer(owner(), toTransferAmount), 'Token transfer failed');\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return balances[account];\\n    }\\n}\\n\",\"keccak256\":\"0x1f5ca655212b0577989711c3b45f6de01a750c9261fed3d6fc119a8dbbc76d52\",\"license\":\"MIT\"},\"contracts/pool/IDaoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IDaoPool {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function vote(address proposalAddress, bool voteSide) external;\\n}\\n\",\"keccak256\":\"0xd8ece40d8dc43afb7d3f4e806d2bcdc7ab10edc3a0ec5f378c9fed2821f199a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576136ec908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081630f11b679146101bf575080631591a25a146101a25780634ddd4b3d1461006e5763773fd6e21461004e57600080fd5b3461006a578160031936011261006a57602090516203f4808152f35b5080fd5b503461006a578060031936011261006a576001600160a01b036004358181169081900361019e578251906134d5908183019183831067ffffffffffffffff84111761018a5791839160a0936101e28439815260243560208201526203f4808682015267016345785d8a0000606082015262015180608082015203019084f0801561017e5716908254600160401b81101561016a576001810180855581101561015657838052602080852090910180546001600160a01b0319168417905590519182527f87fc1796dbc913ab997ce574688bcad88f5eb317373be9ec71de2bde33e5c83091a180f35b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b84526041600452602484fd5b505051903d90823e3d90fd5b634e487b7160e01b87526041600452602487fd5b8380fd5b503461006a578160031936011261006a5760209051620151808152f35b83903461006a578160031936011261006a578067016345785d8a000060209252f3fe60a03461011c57601f6134d538819003918201601f1916830192916001600160401b039182851184861017610106578160a0928592604097885283398101031261011c5781516001600160a01b03928382169182900361011c576020810151908581015160806060830151920151926001600055600255600355600455600555835191610f45908184019084821090821117610106576020928492612590843981520301906000f09081156100fb57816020917f7e674bfd363a04ca3284fe16b63779e4dd9680669b56efb94d86fd1e95d2e13b93608052845191168152a15161246e9081610122823960805181818161041e01526106870152f35b82513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60808060405260043610156200001f575b5036156200001d57600080fd5b005b600090813560e01c9081630f11b67914620008635750806313725f7d146200079d578063150b7a02146200073657806330b4729314620006b657806333e0ff5d146200066f5780633c28b73c14620006535780634b915bfb14620002de57806361fd18c014620001e25780637347d0f414620001c65780638148232814620001a6578063c6227bb01462000136578063d89cf44a1462000116578063e84dce3014620000f25763fb60129403620000105734620000ef5780600319360112620000ef576020600354604051908152f35b80fd5b5034620000ef576200011062000108366200099e565b919062000a96565b60035580f35b5034620000ef5780600319360112620000ef576020600554604051908152f35b5034620000ef576020366003190112620000ef57600435906001600160401b038211620000ef5760206200016e3660048501620008cd565b81620001846040519283815193849201620009d3565b600190820190815281900382019020546040516001600160a01b039091168152f35b5034620000ef5780600319360112620000ef576020600254604051908152f35b5034620000ef57620001dc62000108366200099e565b60025580f35b5034620000ef576200020860206044620001fc3662000944565b91939295909562000a96565b60405163a9059cbb60e01b81526001600160a01b039586166004820152602481019190915293849283918791165af1908115620002d35782916200028e575b5015620002515780f35b60405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b90506020813d8211620002ca575b81620002ab60209383620008ab565b81010312620002c657518015158103620002c6573862000247565b5080fd5b3d91506200029c565b6040513d84823e3d90fd5b506060366003190112620000ef576001600160401b036004358181116200064f576200030f903690600401620008cd565b81604435116200064f573660236044350112156200064f578160443560040135116200064f573660246044356004013560051b6044350101116200064f5760028354146200060a5760028355604051815162000370818360208601620009d3565b60019082019081528190036020019020546001600160a01b0316620005cb5760045491600254600354906005549460405193846118e4810110906118e486011117620005b7576118e462000b5585396024356118e48501523360206118e48601015260406118e48501015260606118e48401015260806118e4830101526101008060a06118e4840101528460246044350192806200041c846118e48301016044356004013587620009f8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118e4830160c0810182905260e00198909852039034f0948515620005aa5760405160208187516200047c8183858c01620009d3565b60019082019081520301902080546001600160a01b0319166001600160a01b039097169687179055803b15620002c65781809160246040518094819363019aa7d560e11b83528b60048401525af18015620002d3576200058e575b50507f0c47b57627d9405203c438142910583f7e6fb83116720c898b9839c1e5a4f33093620005806004549360025495600354936005549460405198899889946200053a6101208088528251928380928a01526020610140809a019101620009d3565b601f80199101168a019360208b015260243560408b01523360608b015260808a015260a089015260c0880152818782030160e088015201906044356004013590620009f8565b918301520390a16001815580f35b620005999062000881565b620005a6578438620004d7565b8480fd5b50604051903d90823e3d90fd5b634e487b7160e01b87526041600452602487fd5b60405162461bcd60e51b815260206004820152601760248201527650726f706f73616c20616c72656164792065786973747360481b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b5034620000ef576200066962000108366200099e565b60045580f35b5034620000ef5780600319360112620000ef576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620000ef57620006d781620006cd3662000944565b9490919262000a96565b6001600160a01b0391821690813b156200073257836064926040519687958694632142170760e11b865230600487015216602485015260448401525af18015620002d35762000724575080f35b6200072f9062000881565b80f35b8380fd5b5034620000ef576080366003190112620000ef576004356001600160a01b03811603620000ef57620007676200092d565b506064356001600160401b038111620002c6576200078a903690600401620008cd565b50604051630a85bd0160e11b8152602090f35b5034620000ef576060366003190112620000ef576004356001600160401b038111620002c657620007d3903690600401620008cd565b620007dd6200092d565b604435906001600160a01b031680156200082c5783808080948194620008038862000a96565b82821562000822575bf115620008165780f35b604051903d90823e3d90fd5b506108fc6200080c565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b905034620002c65781600319360112620002c6576020906004548152f35b6001600160401b0381116200089557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b038211176200089557604052565b81601f8201121562000928578035906001600160401b03821162000895576040519262000905601f8401601f191660200185620008ab565b828452602083830101116200092857816000926020809301838601378301015290565b600080fd5b602435906001600160a01b03821682036200092857565b60806003198201126200092857600435906001600160401b03821162000928576200097291600401620008cd565b906001600160a01b03906024358281168103620009285791604435908116810362000928579060643590565b60406003198201126200092857600435906001600160401b0382116200092857620009cc91600401620008cd565b9060243590565b60005b838110620009e75750506000910152565b8181015183820152602001620009d6565b8183526020600583901b84018101939192906000818401855b84831062000a23575050505050505090565b90919293949596601f19808883030184528835601e19843603018112156200092857830186810190356001600160401b038111620009285780360382136200092857838893601f83808796879660019a528686013760008582860101520116010199019301930191959493929062000a11565b602062000aad6040519283815193849201620009d3565b60019082019081528190036020019020546001600160a01b0316801562000b1557330362000ad757565b60405162461bcd60e51b815260206004820152601660248201527513db9b1e481c1c9bdc1bdcd85b0818d85b8818d85b1b60521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276141c9bdc1bdcd85b08191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606490fdfe6101a0604052620018e4620000168138036200065b565b806101605281803803913961016051813803810161010082820312620001a2578151602083015190936001600160a01b0382168203620001a2576040840151606085015161018052608085015160a0860151959094906001600160401b038711620001a257860190601f82011215620001a25751956001600160401b0387116200058357620000ab60208860051b016200065b565b936020858981520194859061016051863803810160208c60051b8c8401010111620001a2578901602001965b6101605160208c60051b8c83010101891015620001bc578851906001600160401b038211620001a257818c8201019089380301603f82011215620001a257602001516001600160401b038111620001a7578b91896040838362000144601f8301601f19166020016200065b565b96828852610160519438038501940101010111620001a25760005b8d838210620001845750505091816000602080958195010152815201970196620000d7565b9060408184602094610160510101010151828287010152016200015f565b600080fd5b60246000634e487b7160e01b81526041600452fd5b50506101605160c08101519589916001600160a01b0388168803620001a25760e0015160016000556006805460ff19169055956001600160a01b0386161562000624576080528460a05260c0526101805160e052600155519068010000000000000000821162000583576002548260025580831062000599575b5060026000908152600080516020620018c483398151915292915b828210620004535750505050610140914283526101209360018060a01b03168452336101005260075560c05134106200040e5760c0518015620003b3573406620003c95760c0518015620003b3577f2f9952040a017f53cb65506910abf3e4adbfb209f705fa9d0f89dea21f5c9e8391608091340460018060a01b038216600052600560205280604060002055806003556040519160018060a01b0316825260016020830152604082015260006060820152a1604051906111ec9283620006d88439608051836106c8015260a051838181610ac80152610db8015260c0518381816105610152818161087501528181610b4a0152610e61015260e0518381816102b4015261074d015261010051838181610a5c0152610e1b01525182818161026f0152610d500152518181816101d701528181610228015281816104a2015281816107080152818161084701528181610a00015281816110fd015261117c0152f35b634e487b7160e01b600052601260045260246000fd5b60405162461bcd60e51b815260206004820152601460248201527f436f6c6c61746572616c20696e636f72726563740000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527f436f6c6c61746572616c20746f6f20736d616c6c0000000000000000000000006044820152606490fd5b80518051906001600160401b038211620005835762000473865462000681565b601f811162000541575b50602090601f8311600114620004ce579282600194936020938695600092620004c2575b5050600019600383901b1c191690841b1787555b0194019101909262000251565b015190508c80620004a1565b90601f198316918760005260206000209260005b8181106200052857509360209360019693879693838895106200050e575b505050811b018755620004b5565b015160001960f88460031b161c191690558c808062000500565b92936020600181928786015181550195019301620004e2565b6200057190876000526020600020601f850160051c8101916020861062000578575b601f0160051c0190620006be565b896200047d565b909150819062000563565b634e487b7160e01b600052604160045260246000fd5b6002600052600080516020620018c48339815191529081019083015b818110620005c4575062000236565b80620005d36001925462000681565b80620005e2575b5001620005b5565b601f81118314620005fa5750600081555b88620005da565b6000908282526200061a601f60208420920160051c8201858301620006be565b81835555620005f3565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6040519190601f01601f191682016001600160401b038111838210176200058357604052565b90600182811c92168015620006b3575b60208310146200069d57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000691565b818110620006ca575050565b60008155600101620006be56fe608060408181526004918236101561001657600080fd5b600092833560e01c9182630f11b67914610e4a575081632131c68c14610e06578163279dbe0714610de75781632cee6a6b14610da357816331a38c8914610d7f57816333e0ff5d14610d3b578163373058b8146109e557816338d7497d146109bf5781634b9f5c98146108205781636545645b146107705781638148232814610735578163a4fd6f56146106eb578163ada9e444146106b0578163b88a802f1461048a578163ce583e92146101fa578163cea3e530146101bf578163d89cf44a146101a0578163d8bff5a514610144578163efc8514c14610122575063fb6012941461010157600080fd5b3461011e578160031936011261011e576020906001549051908152f35b5080fd5b90503461014057826003193601126101405760209250549051908152f35b8280fd5b90503461014057602036600319011261014057356001600160a01b038116908190036101405782829160809452600560205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b50503461011e578160031936011261011e576020906007549051908152f35b50503461011e578160031936011261011e57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b905034610140576020918260031936011261048657813591821515908184036104825761025461024c6001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b421115610ea7565b61025c6110f4565b82516370a0823160e01b815233828201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908681602481855afa8015610478578890610445575b6102d991507f000000000000000000000000000000000000000000000000000000000000000090610f10565b94851561040557908792913384526005885285842087600282019182541593846103f8575b156103d95750610318828261031d94549155600354610f6c565b610e84565b6003555b610365575b827f2f9952040a017f53cb65506910abf3e4adbfb209f705fa9d0f89dea21f5c9e8360808989898981519333855284015282015260016060820152a180f35b803b15610140578290604486518095819363bd041c4d60e01b835233878401528860248401525af180156103cf5761039f575b8691610326565b6001600160401b0382979397116103bc5750825293816080610398565b634e487b7160e01b835260419052602482fd5b84513d89823e3d90fd5b6103f192506003610318910182815491558654610f6c565b8355610321565b60038201541594506102fe565b845162461bcd60e51b8152808401889052601a602482015279151bdad95b8818dbdb1b185d195c985b081d1bdbc81cdb585b1b60321b6044820152606490fd5b508681813d8311610471575b61045b8183610f4b565b8101031261046d576102d990516102ad565b8780fd5b503d610451565b85513d8a823e3d90fd5b8580fd5b8380fd5b905082600319360112610140576104cd6104c66001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b4211610f79565b33835260056020528183209082516104e481610f1a565b82548152600183015460208201908152600360028501549486840195865201549360608301948552610514611174565b94851561069b57508251905161052991610e84565b915b8215610665576105b8936105a66105b1946105a08a98956105ab958760001461065d57600354955b88156106535754915b6105877f00000000000000000000000000000000000000000000000000000000000000008094610fc5565b98610592888b610ef0565b9c501561064b575051610fc5565b94610fc5565b610f10565b90610e84565b9182610e84565b4714610644575b33835260056020526105e582842060036000918281558260018201558260028201550155565b828082801561063a575b8280929181923390f11561062f57907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241918151903382526020820152a180f35b5051903d90823e3d90fd5b6108fc91506105ef565b50476105bf565b905051610fc5565b506003549161055c565b855495610553565b855162461bcd60e51b8152602081860152601060248201526f526577617264206e6f74206170706c7960801b6044820152606490fd5b6106aa91508251905190610e84565b9161052b565b50503461011e578160031936011261011e57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461011e578160031936011261011e5760209061072c6001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b42119051908152f35b50503461011e578160031936011261011e57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b82843461081d578060031936011261081d579061078b610fd8565b8151928392602080850190808652845180925280838701938360051b880101950193805b8382106107bc5787870388f35b9193959092949650603f19888203018652838751805190818452845b82811061080957505081838286838095600198010152601f80199101160101980196019201879695949293916107af565b8181018401518582018501528793016107d8565b80fd5b9050602036600319011261014057803591821515928381036109bb5761086b61024c6001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b6108736110f4565b7f0000000000000000000000000000000000000000000000000000000000000000803410610981576108a58134610ef0565b6109475791608093916108da7f2f9952040a017f53cb65506910abf3e4adbfb209f705fa9d0f89dea21f5c9e83969434610f10565b9233885260056020528288209160001461092457506108fa838254610e84565b905561090882600354610e84565b6003555b8051923384526020840152820152836060820152a180f35b90600101610933848254610e84565b9055610940838254610e84565b905561090c565b825162461bcd60e51b8152602081860152601460248201527310dbdb1b185d195c985b081a5b98dbdc9c9958dd60621b6044820152606490fd5b825162461bcd60e51b8152602081860152601460248201527310dbdb1b185d195c985b081d1bdbc81cdb585b1b60621b6044820152606490fd5b8480fd5b50503461011e578160031936011261011e576020906109dc611174565b90519015158152f35b9190508260031936011261014057600191610a246104c684547f0000000000000000000000000000000000000000000000000000000000000000610e84565b6002845414610cf9576002845560065460ff8116610cba57610a44611174565b15610c7f5760ff19168317600655610a5a610fd8565b7f000000000000000000000000000000000000000000000000000000000000000085855b610b91575b5050505415610abb575b60207fdf42bfa876a741bbe542cf1a563269e1390bf03901b5d433a6e8afd6ee36dbfe9151338152a1815580f35b8280808060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000168082526005602052610b6f8683206003885191610b0483610f1a565b805483528a810154602084015260028101548a840152015460608201528284526005602052610b4788852060036000918281558260018201558260028201550155565b517f000000000000000000000000000000000000000000000000000000000000000090610fc5565b90828215610b88575bf1610a8d5751913d9150823e3d90fd5b506108fc610b78565b8251811015610c7a5760208780828460051b87010151838151910182875af13d15610c75573d6001600160401b038111610c6257875190610bdb601f8201601f1916850183610f4b565b815289833d92013e5b15610c0e57506000198114610bfb57850185610a7e565b634e487b7160e01b875260118452602487fd5b8460849187519162461bcd60e51b8352820152602960248201527f50726f706f73616c3a20756e6465726c79696e67207472616e73616374696f6e604482015268081c995d995c9d195960ba1b6064820152fd5b634e487b7160e01b8a526041875260248afd5b610be4565b610a83565b506020606492519162461bcd60e51b8352820152601560248201527450726f706f73616c20646964206e6f74207061737360581b6044820152fd5b506020606492519162461bcd60e51b83528201526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152fd5b6020606492519162461bcd60e51b8352820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b50503461011e578160031936011261011e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461011e578160031936011261011e5760209060ff6006541690519015158152f35b50503461011e578160031936011261011e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461011e578160031936011261011e576020906003549051908152f35b50503461011e578160031936011261011e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b84903461011e578160031936011261011e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b91908201809211610e9157565b634e487b7160e01b600052601160045260246000fd5b15610eae57565b60405162461bcd60e51b815260206004820152601a602482015279125cc81b9bdd081a5b8818da185b1b195b99d9481c195c9a5bd960321b6044820152606490fd5b8115610efa570690565b634e487b7160e01b600052601260045260246000fd5b8115610efa570490565b608081019081106001600160401b03821117610f3557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b03821117610f3557604052565b91908203918211610e9157565b15610f8057565b60405162461bcd60e51b815260206004820152601d60248201527f4973206e6f74206166746572206368616c6c656e676520706572696f640000006044820152606490fd5b81810292918115918404141715610e9157565b600254906001600160401b038211610f35576040805192600591602061100283851b820187610f4b565b82865280860190600092600284528184209084935b868510611028575050505050505050565b8151869184549160019280841c9084811680156110ea575b89831081146110d65782845289949392918e9082156110b8575050600114611080575b50611072816001960382610f4b565b815201930194019391611017565b878b52838b2095508a905b8082106110a15750810183019450611072611063565b86548383018601529585019589949091019061108b565b60ff19168685015291151590911b8201840195506110729050611063565b634e487b7160e01b8c52602260045260248cfd5b91607f1691611040565b600154611121817f0000000000000000000000000000000000000000000000000000000000000000610e84565b610e0f198101908111610e915742116111375750565b60207f3cca71a947cd4d67d94cd84308fae5f35b54a8fc120b9522b9ede48f41954e7b916111686007548092610e84565b600155604051908152a1565b6111a06001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b4211156111b1576003546004541090565b60009056fea26469706673582212202a50be443108de1a5af55c7c61770ff7468a060bfb2d6d16f038d66557537df564736f6c63430008120033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acea2646970667358221220e1c73e15c5308593149fb5b565daf7c66e13dcb186c31554a79d9955a52363f464736f6c6343000812003360a0346100bd57601f610f4538819003918201601f19168301916001600160401b038311848410176100c2578084926020946040528339810103126100bd57516001600160a01b0390818116908190036100bd576000543360018060a01b0319821617600055604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3608052610e6c90816100d9823960805181818160dc0152818161043f015281816107310152610a4f0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918262f714ce146109a25750816303354faa1461096157816314ca6a971461091b57816327e235e3146108a6578163539e580a146108de57816370a08231146108a6578163715018a61461084c5781638cc6651f146108145781638da5cb5b146107ec578163b6b55f25146106f7578163bd041c4d146105b3578163d76add1214610231578163ec0d7b27146101d6578163f2fde38b1461010f575063fc0c546a146100c957600080fd5b3461010b578160031936011261010b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b9050346101d25760203660031901126101d25761012a610b83565b90610133610be2565b6001600160a01b0391821692831561018057505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461010b57602036600319011261010b5761022d9161021c91906102239082906001600160a01b03610208610b83565b168152600260205220825193848092610d2f565b0383610d75565b5191829182610b9e565b0390f35b905082346105b0576020928360031936011261010b576001600160a01b039384610259610b83565b169485845284825261027060ff8486205416610c3a565b825163527eb7ab60e11b8152828187818a5afa9081156105a6578591610589575b50156105515782516338d7497d60e01b8082529590838183818b5afa908115610518579061021c92918791610534575b501561052257878652600284526102e08587205b865193848092610d2f565b8597865b83518110156103325780856102fc61032d9387610ded565b51169a8b8a52610315600591828a528a8c205490610d22565b9b8a5287528888812055600387528888812055610c7e565b6102e4565b5096909791508451908152838189818a5afa908115610518579061021c929187916104fb575b50156104e95786865260018452610376858720865193848092610d2f565b855b82518110156103c8578361038c8285610ded565b511687526003855285872080546000198101919082116103b557556103b090610c7e565b610378565b634e487b7160e01b895260118b52602489fd5b8689868861043b82878a8f808952600184526103e5868a20610e01565b808952600284526103f7868a20610e01565b885286835284882060ff1981541690558088541688865180968195829463a9059cbb60e01b84528c840160209093929193604081019460018060a01b031681520152565b03927f0000000000000000000000000000000000000000000000000000000000000000165af19081156104df5785916104b2575b5015610479578380f35b5162461bcd60e51b8152918201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260649150fd5b6104d29150833d85116104d8575b6104ca8183610d75565b810190610d97565b8561046f565b503d6104c0565b82513d87823e3d90fd5b868652600284526103768587206102d5565b6105129150853d87116104d8576104ca8183610d75565b89610358565b85513d88823e3d90fd5b878652600184526102e08587206102d5565b61054b9150853d87116104d8576104ca8183610d75565b896102c1565b825162461bcd60e51b81528086018390526012602482015271141c9bdc1bdcd85b081b9bdd08195b99195960721b6044820152606490fd5b6105a09150833d85116104d8576104ca8183610d75565b87610291565b84513d87823e3d90fd5b80fd5b8391503461010b578260031936011261010b576105ce610b83565b602490813580151581036106f3573385526020918483526105f460ff8888205416610c3a565b81156106e157338652600183528686209591955b6001600160a01b03828116939092815b835481101561067a57858561062d8387610ca3565b90549060031b1c16146106485761064390610c7e565b610618565b8a5162461bcd60e51b8152808a01889052600d818a01526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b50868a600388888c958e6000146106c95761069e9033895260018452858920610cd1565b865252832090815492600184018094116106b85750505580f35b634e487b7160e01b85526011905283fd5b6106dc9033895260028452858920610cd1565b61069e565b33865260028352868620959195610608565b8480fd5b9050346101d257602090816003193601126107e85781813533865260058252848620610724828254610d22565b9055606460018060a01b037f000000000000000000000000000000000000000000000000000000000000000016938487518481527fcbc4a4091b012bb1329c38bbbb15455f5cac5aa3673da0a7f38cd61a4f495517863392a387875195869485936323b872dd60e01b8552339085015230602485015260448401525af19182156107db576107bb935084926107be575b5050610daf565b80f35b6107d49250803d106104d8576104ca8183610d75565b38806107b4565b50505051903d90823e3d90fd5b8380fd5b50503461010b578160031936011261010b57905490516001600160a01b039091168152602090f35b50503461010b57602036600319011261010b5760209181906001600160a01b0361083c610b83565b1681526003845220549051908152f35b83346105b057806003193601126105b057610865610be2565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461010b57602036600319011261010b5760209181906001600160a01b036108ce610b83565b1681526005845220549051908152f35b9050346101d25760203660031901126101d25760209260ff918391906001600160a01b0361090a610b83565b168252855220541690519015158152f35b50503461010b57602036600319011261010b5761022d9161021c91906102239082906001600160a01b0361094d610b83565b168152600160205220825193848092610d2f565b9050346101d25760203660031901126101d25761097c610b83565b610984610be2565b6001600160a01b031683526020528120805460ff1916600117905580f35b909150346107e857826003193601126107e8576024356001600160a01b0381811694843593929091868203610b7f573388526020936003855283892054610b42575033885260058452848389205410610b085733885260058452828820805490868203918211610af55791869391869355338a526005835289858120805415610aed575b5050845163a9059cbb60e01b81526001600160a01b0390921697820197885260208801939093527f000000000000000000000000000000000000000000000000000000000000000092909216958290819060400103818a895af1908115610ae3577f4e5ba90310f16273bb12f3c33f23905e573b86df58a2895a525285d083bf043f939291610abc918991610ac6575b50610daf565b519283523392a480f35b610add9150843d86116104d8576104ca8183610d75565b38610ab6565b82513d89823e3d90fd5b558938610a26565b634e487b7160e01b8a526011885260248afd5b825162461bcd60e51b81528087018590526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b62461bcd60e51b815286810185905260196024820152785573657220686173206163746976652070726f706f73616c7360381b6044820152606490fd5b8780fd5b600435906001600160a01b0382168203610b9957565b600080fd5b6020908160408183019282815285518094520193019160005b828110610bc5575050505090565b83516001600160a01b031685529381019392810192600101610bb7565b6000546001600160a01b03163303610bf657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15610c4157565b60405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081b9bdd08185c1c1c9bdd9959605a1b6044820152606490fd5b6000198114610c8d5760010190565b634e487b7160e01b600052601160045260246000fd5b8054821015610cbb5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b8054600160401b811015610d0c57610cee91600182018155610ca3565b819291549060031b9160018060a01b03809116831b921b1916179055565b634e487b7160e01b600052604160045260246000fd5b91908201809211610c8d57565b90815480825260208092019260005281600020916000905b828210610d55575050505090565b83546001600160a01b031685529384019360019384019390910190610d47565b90601f8019910116810190811067ffffffffffffffff821117610d0c57604052565b90816020910312610b9957518015158103610b995790565b15610db657565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b8051821015610cbb5760209160051b010190565b80549060009081815582610e1457505050565b815260208120918201915b828110610e2b57505050565b818155600101610e1f56fea2646970667358221220db1b166db86f7620b9e299f45703a9eea139177536b40fb370303b619f5febfb64736f6c63430008120033a2646970667358221220c5f6511c7b1ce9a9dfb3a8090cc11ed1537335a90c7b7b21901eca54b4a697dd64736f6c63430008120033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c9081630f11b679146101bf575080631591a25a146101a25780634ddd4b3d1461006e5763773fd6e21461004e57600080fd5b3461006a578160031936011261006a57602090516203f4808152f35b5080fd5b503461006a578060031936011261006a576001600160a01b036004358181169081900361019e578251906134d5908183019183831067ffffffffffffffff84111761018a5791839160a0936101e28439815260243560208201526203f4808682015267016345785d8a0000606082015262015180608082015203019084f0801561017e5716908254600160401b81101561016a576001810180855581101561015657838052602080852090910180546001600160a01b0319168417905590519182527f87fc1796dbc913ab997ce574688bcad88f5eb317373be9ec71de2bde33e5c83091a180f35b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b84526041600452602484fd5b505051903d90823e3d90fd5b634e487b7160e01b87526041600452602487fd5b8380fd5b503461006a578160031936011261006a5760209051620151808152f35b83903461006a578160031936011261006a578067016345785d8a000060209252f3fe60a03461011c57601f6134d538819003918201601f1916830192916001600160401b039182851184861017610106578160a0928592604097885283398101031261011c5781516001600160a01b03928382169182900361011c576020810151908581015160806060830151920151926001600055600255600355600455600555835191610f45908184019084821090821117610106576020928492612590843981520301906000f09081156100fb57816020917f7e674bfd363a04ca3284fe16b63779e4dd9680669b56efb94d86fd1e95d2e13b93608052845191168152a15161246e9081610122823960805181818161041e01526106870152f35b82513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60808060405260043610156200001f575b5036156200001d57600080fd5b005b600090813560e01c9081630f11b67914620008635750806313725f7d146200079d578063150b7a02146200073657806330b4729314620006b657806333e0ff5d146200066f5780633c28b73c14620006535780634b915bfb14620002de57806361fd18c014620001e25780637347d0f414620001c65780638148232814620001a6578063c6227bb01462000136578063d89cf44a1462000116578063e84dce3014620000f25763fb60129403620000105734620000ef5780600319360112620000ef576020600354604051908152f35b80fd5b5034620000ef576200011062000108366200099e565b919062000a96565b60035580f35b5034620000ef5780600319360112620000ef576020600554604051908152f35b5034620000ef576020366003190112620000ef57600435906001600160401b038211620000ef5760206200016e3660048501620008cd565b81620001846040519283815193849201620009d3565b600190820190815281900382019020546040516001600160a01b039091168152f35b5034620000ef5780600319360112620000ef576020600254604051908152f35b5034620000ef57620001dc62000108366200099e565b60025580f35b5034620000ef576200020860206044620001fc3662000944565b91939295909562000a96565b60405163a9059cbb60e01b81526001600160a01b039586166004820152602481019190915293849283918791165af1908115620002d35782916200028e575b5015620002515780f35b60405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b90506020813d8211620002ca575b81620002ab60209383620008ab565b81010312620002c657518015158103620002c6573862000247565b5080fd5b3d91506200029c565b6040513d84823e3d90fd5b506060366003190112620000ef576001600160401b036004358181116200064f576200030f903690600401620008cd565b81604435116200064f573660236044350112156200064f578160443560040135116200064f573660246044356004013560051b6044350101116200064f5760028354146200060a5760028355604051815162000370818360208601620009d3565b60019082019081528190036020019020546001600160a01b0316620005cb5760045491600254600354906005549460405193846118e4810110906118e486011117620005b7576118e462000b5585396024356118e48501523360206118e48601015260406118e48501015260606118e48401015260806118e4830101526101008060a06118e4840101528460246044350192806200041c846118e48301016044356004013587620009f8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118e4830160c0810182905260e00198909852039034f0948515620005aa5760405160208187516200047c8183858c01620009d3565b60019082019081520301902080546001600160a01b0319166001600160a01b039097169687179055803b15620002c65781809160246040518094819363019aa7d560e11b83528b60048401525af18015620002d3576200058e575b50507f0c47b57627d9405203c438142910583f7e6fb83116720c898b9839c1e5a4f33093620005806004549360025495600354936005549460405198899889946200053a6101208088528251928380928a01526020610140809a019101620009d3565b601f80199101168a019360208b015260243560408b01523360608b015260808a015260a089015260c0880152818782030160e088015201906044356004013590620009f8565b918301520390a16001815580f35b620005999062000881565b620005a6578438620004d7565b8480fd5b50604051903d90823e3d90fd5b634e487b7160e01b87526041600452602487fd5b60405162461bcd60e51b815260206004820152601760248201527650726f706f73616c20616c72656164792065786973747360481b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b5034620000ef576200066962000108366200099e565b60045580f35b5034620000ef5780600319360112620000ef576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034620000ef57620006d781620006cd3662000944565b9490919262000a96565b6001600160a01b0391821690813b156200073257836064926040519687958694632142170760e11b865230600487015216602485015260448401525af18015620002d35762000724575080f35b6200072f9062000881565b80f35b8380fd5b5034620000ef576080366003190112620000ef576004356001600160a01b03811603620000ef57620007676200092d565b506064356001600160401b038111620002c6576200078a903690600401620008cd565b50604051630a85bd0160e11b8152602090f35b5034620000ef576060366003190112620000ef576004356001600160401b038111620002c657620007d3903690600401620008cd565b620007dd6200092d565b604435906001600160a01b031680156200082c5783808080948194620008038862000a96565b82821562000822575bf115620008165780f35b604051903d90823e3d90fd5b506108fc6200080c565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b905034620002c65781600319360112620002c6576020906004548152f35b6001600160401b0381116200089557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b038211176200089557604052565b81601f8201121562000928578035906001600160401b03821162000895576040519262000905601f8401601f191660200185620008ab565b828452602083830101116200092857816000926020809301838601378301015290565b600080fd5b602435906001600160a01b03821682036200092857565b60806003198201126200092857600435906001600160401b03821162000928576200097291600401620008cd565b906001600160a01b03906024358281168103620009285791604435908116810362000928579060643590565b60406003198201126200092857600435906001600160401b0382116200092857620009cc91600401620008cd565b9060243590565b60005b838110620009e75750506000910152565b8181015183820152602001620009d6565b8183526020600583901b84018101939192906000818401855b84831062000a23575050505050505090565b90919293949596601f19808883030184528835601e19843603018112156200092857830186810190356001600160401b038111620009285780360382136200092857838893601f83808796879660019a528686013760008582860101520116010199019301930191959493929062000a11565b602062000aad6040519283815193849201620009d3565b60019082019081528190036020019020546001600160a01b0316801562000b1557330362000ad757565b60405162461bcd60e51b815260206004820152601660248201527513db9b1e481c1c9bdc1bdcd85b0818d85b8818d85b1b60521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276141c9bdc1bdcd85b08191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606490fdfe6101a0604052620018e4620000168138036200065b565b806101605281803803913961016051813803810161010082820312620001a2578151602083015190936001600160a01b0382168203620001a2576040840151606085015161018052608085015160a0860151959094906001600160401b038711620001a257860190601f82011215620001a25751956001600160401b0387116200058357620000ab60208860051b016200065b565b936020858981520194859061016051863803810160208c60051b8c8401010111620001a2578901602001965b6101605160208c60051b8c83010101891015620001bc578851906001600160401b038211620001a257818c8201019089380301603f82011215620001a257602001516001600160401b038111620001a7578b91896040838362000144601f8301601f19166020016200065b565b96828852610160519438038501940101010111620001a25760005b8d838210620001845750505091816000602080958195010152815201970196620000d7565b9060408184602094610160510101010151828287010152016200015f565b600080fd5b60246000634e487b7160e01b81526041600452fd5b50506101605160c08101519589916001600160a01b0388168803620001a25760e0015160016000556006805460ff19169055956001600160a01b0386161562000624576080528460a05260c0526101805160e052600155519068010000000000000000821162000583576002548260025580831062000599575b5060026000908152600080516020620018c483398151915292915b828210620004535750505050610140914283526101209360018060a01b03168452336101005260075560c05134106200040e5760c0518015620003b3573406620003c95760c0518015620003b3577f2f9952040a017f53cb65506910abf3e4adbfb209f705fa9d0f89dea21f5c9e8391608091340460018060a01b038216600052600560205280604060002055806003556040519160018060a01b0316825260016020830152604082015260006060820152a1604051906111ec9283620006d88439608051836106c8015260a051838181610ac80152610db8015260c0518381816105610152818161087501528181610b4a0152610e61015260e0518381816102b4015261074d015261010051838181610a5c0152610e1b01525182818161026f0152610d500152518181816101d701528181610228015281816104a2015281816107080152818161084701528181610a00015281816110fd015261117c0152f35b634e487b7160e01b600052601260045260246000fd5b60405162461bcd60e51b815260206004820152601460248201527f436f6c6c61746572616c20696e636f72726563740000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527f436f6c6c61746572616c20746f6f20736d616c6c0000000000000000000000006044820152606490fd5b80518051906001600160401b038211620005835762000473865462000681565b601f811162000541575b50602090601f8311600114620004ce579282600194936020938695600092620004c2575b5050600019600383901b1c191690841b1787555b0194019101909262000251565b015190508c80620004a1565b90601f198316918760005260206000209260005b8181106200052857509360209360019693879693838895106200050e575b505050811b018755620004b5565b015160001960f88460031b161c191690558c808062000500565b92936020600181928786015181550195019301620004e2565b6200057190876000526020600020601f850160051c8101916020861062000578575b601f0160051c0190620006be565b896200047d565b909150819062000563565b634e487b7160e01b600052604160045260246000fd5b6002600052600080516020620018c48339815191529081019083015b818110620005c4575062000236565b80620005d36001925462000681565b80620005e2575b5001620005b5565b601f81118314620005fa5750600081555b88620005da565b6000908282526200061a601f60208420920160051c8201858301620006be565b81835555620005f3565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6040519190601f01601f191682016001600160401b038111838210176200058357604052565b90600182811c92168015620006b3575b60208310146200069d57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000691565b818110620006ca575050565b60008155600101620006be56fe608060408181526004918236101561001657600080fd5b600092833560e01c9182630f11b67914610e4a575081632131c68c14610e06578163279dbe0714610de75781632cee6a6b14610da357816331a38c8914610d7f57816333e0ff5d14610d3b578163373058b8146109e557816338d7497d146109bf5781634b9f5c98146108205781636545645b146107705781638148232814610735578163a4fd6f56146106eb578163ada9e444146106b0578163b88a802f1461048a578163ce583e92146101fa578163cea3e530146101bf578163d89cf44a146101a0578163d8bff5a514610144578163efc8514c14610122575063fb6012941461010157600080fd5b3461011e578160031936011261011e576020906001549051908152f35b5080fd5b90503461014057826003193601126101405760209250549051908152f35b8280fd5b90503461014057602036600319011261014057356001600160a01b038116908190036101405782829160809452600560205220908154916001810154916003600283015492015492815194855260208501528301526060820152f35b50503461011e578160031936011261011e576020906007549051908152f35b50503461011e578160031936011261011e57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b905034610140576020918260031936011261048657813591821515908184036104825761025461024c6001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b421115610ea7565b61025c6110f4565b82516370a0823160e01b815233828201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908681602481855afa8015610478578890610445575b6102d991507f000000000000000000000000000000000000000000000000000000000000000090610f10565b94851561040557908792913384526005885285842087600282019182541593846103f8575b156103d95750610318828261031d94549155600354610f6c565b610e84565b6003555b610365575b827f2f9952040a017f53cb65506910abf3e4adbfb209f705fa9d0f89dea21f5c9e8360808989898981519333855284015282015260016060820152a180f35b803b15610140578290604486518095819363bd041c4d60e01b835233878401528860248401525af180156103cf5761039f575b8691610326565b6001600160401b0382979397116103bc5750825293816080610398565b634e487b7160e01b835260419052602482fd5b84513d89823e3d90fd5b6103f192506003610318910182815491558654610f6c565b8355610321565b60038201541594506102fe565b845162461bcd60e51b8152808401889052601a602482015279151bdad95b8818dbdb1b185d195c985b081d1bdbc81cdb585b1b60321b6044820152606490fd5b508681813d8311610471575b61045b8183610f4b565b8101031261046d576102d990516102ad565b8780fd5b503d610451565b85513d8a823e3d90fd5b8580fd5b8380fd5b905082600319360112610140576104cd6104c66001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b4211610f79565b33835260056020528183209082516104e481610f1a565b82548152600183015460208201908152600360028501549486840195865201549360608301948552610514611174565b94851561069b57508251905161052991610e84565b915b8215610665576105b8936105a66105b1946105a08a98956105ab958760001461065d57600354955b88156106535754915b6105877f00000000000000000000000000000000000000000000000000000000000000008094610fc5565b98610592888b610ef0565b9c501561064b575051610fc5565b94610fc5565b610f10565b90610e84565b9182610e84565b4714610644575b33835260056020526105e582842060036000918281558260018201558260028201550155565b828082801561063a575b8280929181923390f11561062f57907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241918151903382526020820152a180f35b5051903d90823e3d90fd5b6108fc91506105ef565b50476105bf565b905051610fc5565b506003549161055c565b855495610553565b855162461bcd60e51b8152602081860152601060248201526f526577617264206e6f74206170706c7960801b6044820152606490fd5b6106aa91508251905190610e84565b9161052b565b50503461011e578160031936011261011e57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503461011e578160031936011261011e5760209061072c6001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b42119051908152f35b50503461011e578160031936011261011e57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b82843461081d578060031936011261081d579061078b610fd8565b8151928392602080850190808652845180925280838701938360051b880101950193805b8382106107bc5787870388f35b9193959092949650603f19888203018652838751805190818452845b82811061080957505081838286838095600198010152601f80199101160101980196019201879695949293916107af565b8181018401518582018501528793016107d8565b80fd5b9050602036600319011261014057803591821515928381036109bb5761086b61024c6001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b6108736110f4565b7f0000000000000000000000000000000000000000000000000000000000000000803410610981576108a58134610ef0565b6109475791608093916108da7f2f9952040a017f53cb65506910abf3e4adbfb209f705fa9d0f89dea21f5c9e83969434610f10565b9233885260056020528288209160001461092457506108fa838254610e84565b905561090882600354610e84565b6003555b8051923384526020840152820152836060820152a180f35b90600101610933848254610e84565b9055610940838254610e84565b905561090c565b825162461bcd60e51b8152602081860152601460248201527310dbdb1b185d195c985b081a5b98dbdc9c9958dd60621b6044820152606490fd5b825162461bcd60e51b8152602081860152601460248201527310dbdb1b185d195c985b081d1bdbc81cdb585b1b60621b6044820152606490fd5b8480fd5b50503461011e578160031936011261011e576020906109dc611174565b90519015158152f35b9190508260031936011261014057600191610a246104c684547f0000000000000000000000000000000000000000000000000000000000000000610e84565b6002845414610cf9576002845560065460ff8116610cba57610a44611174565b15610c7f5760ff19168317600655610a5a610fd8565b7f000000000000000000000000000000000000000000000000000000000000000085855b610b91575b5050505415610abb575b60207fdf42bfa876a741bbe542cf1a563269e1390bf03901b5d433a6e8afd6ee36dbfe9151338152a1815580f35b8280808060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000168082526005602052610b6f8683206003885191610b0483610f1a565b805483528a810154602084015260028101548a840152015460608201528284526005602052610b4788852060036000918281558260018201558260028201550155565b517f000000000000000000000000000000000000000000000000000000000000000090610fc5565b90828215610b88575bf1610a8d5751913d9150823e3d90fd5b506108fc610b78565b8251811015610c7a5760208780828460051b87010151838151910182875af13d15610c75573d6001600160401b038111610c6257875190610bdb601f8201601f1916850183610f4b565b815289833d92013e5b15610c0e57506000198114610bfb57850185610a7e565b634e487b7160e01b875260118452602487fd5b8460849187519162461bcd60e51b8352820152602960248201527f50726f706f73616c3a20756e6465726c79696e67207472616e73616374696f6e604482015268081c995d995c9d195960ba1b6064820152fd5b634e487b7160e01b8a526041875260248afd5b610be4565b610a83565b506020606492519162461bcd60e51b8352820152601560248201527450726f706f73616c20646964206e6f74207061737360581b6044820152fd5b506020606492519162461bcd60e51b83528201526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152fd5b6020606492519162461bcd60e51b8352820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b50503461011e578160031936011261011e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461011e578160031936011261011e5760209060ff6006541690519015158152f35b50503461011e578160031936011261011e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461011e578160031936011261011e576020906003549051908152f35b50503461011e578160031936011261011e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b84903461011e578160031936011261011e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b91908201809211610e9157565b634e487b7160e01b600052601160045260246000fd5b15610eae57565b60405162461bcd60e51b815260206004820152601a602482015279125cc81b9bdd081a5b8818da185b1b195b99d9481c195c9a5bd960321b6044820152606490fd5b8115610efa570690565b634e487b7160e01b600052601260045260246000fd5b8115610efa570490565b608081019081106001600160401b03821117610f3557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b03821117610f3557604052565b91908203918211610e9157565b15610f8057565b60405162461bcd60e51b815260206004820152601d60248201527f4973206e6f74206166746572206368616c6c656e676520706572696f640000006044820152606490fd5b81810292918115918404141715610e9157565b600254906001600160401b038211610f35576040805192600591602061100283851b820187610f4b565b82865280860190600092600284528184209084935b868510611028575050505050505050565b8151869184549160019280841c9084811680156110ea575b89831081146110d65782845289949392918e9082156110b8575050600114611080575b50611072816001960382610f4b565b815201930194019391611017565b878b52838b2095508a905b8082106110a15750810183019450611072611063565b86548383018601529585019589949091019061108b565b60ff19168685015291151590911b8201840195506110729050611063565b634e487b7160e01b8c52602260045260248cfd5b91607f1691611040565b600154611121817f0000000000000000000000000000000000000000000000000000000000000000610e84565b610e0f198101908111610e915742116111375750565b60207f3cca71a947cd4d67d94cd84308fae5f35b54a8fc120b9522b9ede48f41954e7b916111686007548092610e84565b600155604051908152a1565b6111a06001547f0000000000000000000000000000000000000000000000000000000000000000610e84565b4211156111b1576003546004541090565b60009056fea26469706673582212202a50be443108de1a5af55c7c61770ff7468a060bfb2d6d16f038d66557537df564736f6c63430008120033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acea2646970667358221220e1c73e15c5308593149fb5b565daf7c66e13dcb186c31554a79d9955a52363f464736f6c6343000812003360a0346100bd57601f610f4538819003918201601f19168301916001600160401b038311848410176100c2578084926020946040528339810103126100bd57516001600160a01b0390818116908190036100bd576000543360018060a01b0319821617600055604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3608052610e6c90816100d9823960805181818160dc0152818161043f015281816107310152610a4f0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918262f714ce146109a25750816303354faa1461096157816314ca6a971461091b57816327e235e3146108a6578163539e580a146108de57816370a08231146108a6578163715018a61461084c5781638cc6651f146108145781638da5cb5b146107ec578163b6b55f25146106f7578163bd041c4d146105b3578163d76add1214610231578163ec0d7b27146101d6578163f2fde38b1461010f575063fc0c546a146100c957600080fd5b3461010b578160031936011261010b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b9050346101d25760203660031901126101d25761012a610b83565b90610133610be2565b6001600160a01b0391821692831561018057505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461010b57602036600319011261010b5761022d9161021c91906102239082906001600160a01b03610208610b83565b168152600260205220825193848092610d2f565b0383610d75565b5191829182610b9e565b0390f35b905082346105b0576020928360031936011261010b576001600160a01b039384610259610b83565b169485845284825261027060ff8486205416610c3a565b825163527eb7ab60e11b8152828187818a5afa9081156105a6578591610589575b50156105515782516338d7497d60e01b8082529590838183818b5afa908115610518579061021c92918791610534575b501561052257878652600284526102e08587205b865193848092610d2f565b8597865b83518110156103325780856102fc61032d9387610ded565b51169a8b8a52610315600591828a528a8c205490610d22565b9b8a5287528888812055600387528888812055610c7e565b6102e4565b5096909791508451908152838189818a5afa908115610518579061021c929187916104fb575b50156104e95786865260018452610376858720865193848092610d2f565b855b82518110156103c8578361038c8285610ded565b511687526003855285872080546000198101919082116103b557556103b090610c7e565b610378565b634e487b7160e01b895260118b52602489fd5b8689868861043b82878a8f808952600184526103e5868a20610e01565b808952600284526103f7868a20610e01565b885286835284882060ff1981541690558088541688865180968195829463a9059cbb60e01b84528c840160209093929193604081019460018060a01b031681520152565b03927f0000000000000000000000000000000000000000000000000000000000000000165af19081156104df5785916104b2575b5015610479578380f35b5162461bcd60e51b8152918201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015260649150fd5b6104d29150833d85116104d8575b6104ca8183610d75565b810190610d97565b8561046f565b503d6104c0565b82513d87823e3d90fd5b868652600284526103768587206102d5565b6105129150853d87116104d8576104ca8183610d75565b89610358565b85513d88823e3d90fd5b878652600184526102e08587206102d5565b61054b9150853d87116104d8576104ca8183610d75565b896102c1565b825162461bcd60e51b81528086018390526012602482015271141c9bdc1bdcd85b081b9bdd08195b99195960721b6044820152606490fd5b6105a09150833d85116104d8576104ca8183610d75565b87610291565b84513d87823e3d90fd5b80fd5b8391503461010b578260031936011261010b576105ce610b83565b602490813580151581036106f3573385526020918483526105f460ff8888205416610c3a565b81156106e157338652600183528686209591955b6001600160a01b03828116939092815b835481101561067a57858561062d8387610ca3565b90549060031b1c16146106485761064390610c7e565b610618565b8a5162461bcd60e51b8152808a01889052600d818a01526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b50868a600388888c958e6000146106c95761069e9033895260018452858920610cd1565b865252832090815492600184018094116106b85750505580f35b634e487b7160e01b85526011905283fd5b6106dc9033895260028452858920610cd1565b61069e565b33865260028352868620959195610608565b8480fd5b9050346101d257602090816003193601126107e85781813533865260058252848620610724828254610d22565b9055606460018060a01b037f000000000000000000000000000000000000000000000000000000000000000016938487518481527fcbc4a4091b012bb1329c38bbbb15455f5cac5aa3673da0a7f38cd61a4f495517863392a387875195869485936323b872dd60e01b8552339085015230602485015260448401525af19182156107db576107bb935084926107be575b5050610daf565b80f35b6107d49250803d106104d8576104ca8183610d75565b38806107b4565b50505051903d90823e3d90fd5b8380fd5b50503461010b578160031936011261010b57905490516001600160a01b039091168152602090f35b50503461010b57602036600319011261010b5760209181906001600160a01b0361083c610b83565b1681526003845220549051908152f35b83346105b057806003193601126105b057610865610be2565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461010b57602036600319011261010b5760209181906001600160a01b036108ce610b83565b1681526005845220549051908152f35b9050346101d25760203660031901126101d25760209260ff918391906001600160a01b0361090a610b83565b168252855220541690519015158152f35b50503461010b57602036600319011261010b5761022d9161021c91906102239082906001600160a01b0361094d610b83565b168152600160205220825193848092610d2f565b9050346101d25760203660031901126101d25761097c610b83565b610984610be2565b6001600160a01b031683526020528120805460ff1916600117905580f35b909150346107e857826003193601126107e8576024356001600160a01b0381811694843593929091868203610b7f573388526020936003855283892054610b42575033885260058452848389205410610b085733885260058452828820805490868203918211610af55791869391869355338a526005835289858120805415610aed575b5050845163a9059cbb60e01b81526001600160a01b0390921697820197885260208801939093527f000000000000000000000000000000000000000000000000000000000000000092909216958290819060400103818a895af1908115610ae3577f4e5ba90310f16273bb12f3c33f23905e573b86df58a2895a525285d083bf043f939291610abc918991610ac6575b50610daf565b519283523392a480f35b610add9150843d86116104d8576104ca8183610d75565b38610ab6565b82513d89823e3d90fd5b558938610a26565b634e487b7160e01b8a526011885260248afd5b825162461bcd60e51b81528087018590526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b62461bcd60e51b815286810185905260196024820152785573657220686173206163746976652070726f706f73616c7360381b6044820152606490fd5b8780fd5b600435906001600160a01b0382168203610b9957565b600080fd5b6020908160408183019282815285518094520193019160005b828110610bc5575050505090565b83516001600160a01b031685529381019392810192600101610bb7565b6000546001600160a01b03163303610bf657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15610c4157565b60405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081b9bdd08185c1c1c9bdd9959605a1b6044820152606490fd5b6000198114610c8d5760010190565b634e487b7160e01b600052601160045260246000fd5b8054821015610cbb5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b8054600160401b811015610d0c57610cee91600182018155610ca3565b819291549060031b9160018060a01b03809116831b921b1916179055565b634e487b7160e01b600052604160045260246000fd5b91908201809211610c8d57565b90815480825260208092019260005281600020916000905b828210610d55575050505090565b83546001600160a01b031685529384019360019384019390910190610d47565b90601f8019910116810190811067ffffffffffffffff821117610d0c57604052565b90816020910312610b9957518015158103610b995790565b15610db657565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b8051821015610cbb5760209160051b010190565b80549060009081815582610e1457505050565b815260208120918201915b828110610e2b57505050565b818155600101610e1f56fea2646970667358221220db1b166db86f7620b9e299f45703a9eea139177536b40fb370303b619f5febfb64736f6c63430008120033a2646970667358221220c5f6511c7b1ce9a9dfb3a8090cc11ed1537335a90c7b7b21901eca54b4a697dd64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1614,
        "contract": "contracts/dao/factory/ERC20DaoFactory.sol:ERC20DaoFactory",
        "label": "daos",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Dao)1497)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(Dao)1497)dyn_storage": {
        "base": "t_contract(Dao)1497",
        "encoding": "dynamic_array",
        "label": "contract Dao[]",
        "numberOfBytes": "32"
      },
      "t_contract(Dao)1497": {
        "encoding": "inplace",
        "label": "contract Dao",
        "numberOfBytes": "20"
      }
    }
  }
}